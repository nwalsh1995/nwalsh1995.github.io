<rss version="2.0"><channel><title>nwalsh1995.github.io</title><link>nwalsh1995.github.io</link><description>A collection of thoughts.</description><item><title>Index</title><link>https://nwalsh1995.github.io/index.html</link><description>&lt;!DOCTYPE html&gt;
    &lt;html&gt;
     &lt;head&gt;&lt;/head&gt;
     &lt;body&gt;
      &lt;div&gt;
      &lt;h1&gt;blog&lt;/h1&gt;
       &lt;table&gt;
        &lt;thead&gt;&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;date&lt;/th&gt;&lt;th&gt;size&lt;/th&gt;&lt;/tr&gt;&lt;thead&gt;
        &lt;tbody&gt;
           &lt;tr&gt;&lt;td&gt;&lt;a href="tools-for-humans.html"&gt;tools-for-humans.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2021-05-26T03:25:52.163243&lt;/td&gt;&lt;td&gt;&lt;span class="size"&gt;2 KB&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href="rss.html"&gt;rss.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2020-04-13T05:32:31.809984&lt;/td&gt;&lt;td&gt;&lt;span class="size"&gt;571 bytes&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href="15-min-per-day.html"&gt;15-min-per-day.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2020-03-24T05:36:08.543258&lt;/td&gt;&lt;td&gt;&lt;span class="size"&gt;1 KB&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href="how-hard-could-it-be.html"&gt;how-hard-could-it-be.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2020-03-24T05:36:08.543258&lt;/td&gt;&lt;td&gt;&lt;span class="size"&gt;1 KB&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;&lt;/table&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;</description></item><item><title>Rss</title><link>https://nwalsh1995.github.io/rss.html</link><description>&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;RSS Feed available!&lt;/h1&gt;
&lt;p&gt;
An RSS feed is now available at &lt;a href="https://nwalsh1995.github.io/rss.xml"&gt;https://nwalsh1995.github.io/rss.xml&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
The RSS feed is generated by &lt;a href="https://raw.githubusercontent.com/nwalsh1995/nwalsh1995.github.io/master/generate_rss.py"&gt;this script&lt;/a&gt;. It uses a RSS library that I built since I was interested in learning how RSS works. The library is very simple and /should/ support RSS 2.0. The library is available &lt;a href="https://github.com/nwalsh1995/min-rss-gen"&gt;here.&lt;/a&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description></item><item><title>15 Min Per Day</title><link>https://nwalsh1995.github.io/15-min-per-day.html</link><description>&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;15 minutes per day&lt;/h1&gt;
&lt;p&gt;
Recently I have been feeling unsatified with the amount of progress I was making on side-projects. Every night I would think about the time I spent not working on them and how I was wasting time in other places. However, the next day I was sticking to the same schedule, and again regretting my decisions.
&lt;br/&gt;
&lt;br/&gt;
In order to put more time into side-projects I implemented a "15 minutes per day" 'rule'. No matter what happened in the day, I was going to put 15 minutes of focused time into the project. 15 minutes is the minimum amount, an amount of time that I felt would allow me to progress on the project. Focused time is also important; time that is spent distraction-free.
&lt;br/&gt;
&lt;br/&gt;
Since implementing and following such a rule, I constantly find myself sinking much more than the minimum 15 minutes. I believe this is due to the fact that for some problems, 15 minutes is simply not enough. Instead of stopping development on these problems, I continued them out to their 'prototype' stage which would normally take around an hour.
&lt;br/&gt;
&lt;br/&gt;
From my results of obeying such a rule, it seems that the biggest problem I had was resuming work on the project. In my head there were a lot of moving pieces that were very complex, and the simplest approach was to avoid them. However, once beginning the project I was able to focus on getting the most out of the 15 minutes that were to be spent, which allowed me to think differently about the problems I was facing, and just try to get something working. Often, I would come to a solution that I found acceptable, and I was able to obtain the sense of progression that I was looking for.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description></item><item><title>Tools For Humans</title><link>https://nwalsh1995.github.io/tools-for-humans.html</link><description>&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;tools for humans&lt;/h1&gt;
&lt;p&gt;
My idea of the perfect tool is one that I can use to get the job done as efficiently and pleasantly as possible. That is to say it is something that can be used to fulfill a specific task. For instance, would you keep using and carrying around a shovel after you have finished digging a hole? Why would you ever return to use a shovel? Presumably because you have another hole to dig and thus a need.
&lt;/p&gt;
&lt;p&gt;
Digital services have a huge advantage over physical items. Consider a physical book, if the author could watch their readers (while they are reading the book) then the author could determine where readers decided not to finish. This data allows for the author to iterate, change the troublesome section with something more appealing gain readership. If more people finish the book they are more likely to recommend it, increasing popularity and ultimately lead to more readers. This leads us to a distinction: physical items require third party observation for usage information, digital services do not.
&lt;/p&gt;
&lt;p&gt;
In relation to a shovel, the most popular websites are optimized for attention and increasing the users time of 'eyes on screen'. Some tech business models spring to mind which rely on captivating the user: advertisments (the dominant business model of Google, Facebook, Twitter), microtransacations (the dominant business model of 'free-to-play' games like Fortnite), content consumption (Netflix, Amazon Prime Video, Disney+, many other streaming services). Digital services collect data automatically; without an observer. With the data in hand, experiments are created, tested, and measured against key metrics (like active time on screen or session length). Digital services evolve quicker and back propagate against their optimization function. 
&lt;/p&gt;
&lt;p&gt;
Then, consider the question: does time spent using a tool imply its value? Trivially, the answer is no. Shovel A takes me 30 minutes to finish digging a hole while shovel B takes me an hour. I prefer shovel A to lessen the amount of work required. So, if time spent using a tool does not imply value then how can we determine the amount of value digital services provide? I leave this post as an open question as I find the answer to be subjective. Do your tools work for you?
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description></item><item><title>How Hard Could It Be</title><link>https://nwalsh1995.github.io/how-hard-could-it-be.html</link><description>&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;How hard could it be?&lt;/h1&gt;
&lt;p&gt;
When facing unknowns in programming it is very easy to rely on abstractions built for you by others. When time-constrained it might be more valuable for you to pick up where a framework leaves you, rather than implementing it yourself. Additionally, if you already went through the work of validating the abstraction for correctness and understand its inner workings and design decisions along with its tradeoffs then I can only trust your judgement.
&lt;br/&gt;
&lt;br/&gt;
What about those times where you weren't time pressured? What about those times where you reviewed the existing libraries and found them unsuitable for your needs? When faced with an unknown and non-trivial problem, how will you approach it? The answer to these questions displays your will to learn.
&lt;br/&gt;
&lt;br/&gt;
What I have found most successful for myself is the simple thought 'how hard could it be?'. For instance, I became interested in JWTs and the pieces it is founded on (JWS, JWE). I thought, "If I had to implement this technology how hard could it be?". Really, I had seen everyone using JWTs, heard people give talks on JWTs, and have even used JWTs (minimally) before. How hard could it actually be? Arguably the hardest problem was with the creation of the JWT as an idea which must work across organizations, allow for customization, maintain flexibility for future changes, provide clear guidance on security, and most importantly provide documentation on how to use it properly. For me, the implementor, the biggest challenge is comprehending the words in the RFC and following the specifications. Really... how hard could it be?
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description></item></channel></rss>